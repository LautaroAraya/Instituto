@page "/login"
@using InstitutoServices.Models.Login
@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert
@inject ILogger<Login> logger
@inject IUsuarioService usuarioService
@inject NavigationManager NavigationManager
@inject SweetAlertService SweetAlert



@if (!IsAuthenticated)
{
    <h3>Iniciar sesión</h3>

    <EditForm Model="usuario" OnValidSubmit="IniciarSesion">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText class="form-control mb-2" type="text" @bind-Value="usuario.Email" />
        </div>
        <div class="form-group">
            <label for="clave">Contraseña</label>
            <InputText class="form-control mb-2" type="password" @bind-Value="usuario.Password" />
        </div>
        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Ingresar</button>
    </EditForm>
    <button class="btn btn-dark" @onclick="LoginGoogle">Google</button>
    <button class="btn btn-info" @onclick="LoginFacebook">Facebook</button>



    <button class="btn btn-dark" @onclick="ResetearPassword">Olvidé mi contraseña</button>

}
else
{
    <h1>Bienvenido @userFirebaseAuthenticate.DisplayName</h1>
    <button class="btn btn-primary" @onclick="CerrarSesion">Cerrar sesión</button>
}


@code {
    bool rememberPassword { get; set; } = false;
    Usuario usuario { get; set; } =new Usuario();

    bool IsAuthenticated { get; set; }=false;

    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;


    protected async override Task OnInitializedAsync()
    {
        //userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        usuarioStateService.OnChange += ChequeoEstadoLogin;
    }

    private async Task IniciarSesion()
    {
        LoginResponse response= await AuthService.SignInWithEmailPassword(usuario.Email, usuario.Password, remenberPassword);
        //logger.LogInformation($"la confirmación del email es igual a:{user.EmailVerified}");
        if(response.User==null)  
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Error inicio de sesión",
                Text = $"Error:{response.Error}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = false,
                ConfirmButtonText = "Ok",
            });
        }
        else
        if(!response.User.EmailVerified)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Verificación de email",
                Text = $"{response.User.DisplayName} Debe verificar su email para poder continuar",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = false,
                ConfirmButtonText = "Ok",
            });
        }
        
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
    }

    private async Task CerrarSesion()
    {
        await AuthService.SignOut();
        usuario = new Usuario();
    }

    private async Task Registrarse()
    {
        NavigationManager.NavigateTo("/registrarse");
    }

    private async Task LoginGoogle()
    {
        userFirebaseAuthenticate = await AuthService.LoginWithGoogle();
    }

    private async Task LoginFacebook()
    {
        userFirebaseAuthenticate = await AuthService.LoginWithFacebook();
    }

    public async void ChequeoEstadoLogin()
    {

        StateHasChanged();
     }
        
}